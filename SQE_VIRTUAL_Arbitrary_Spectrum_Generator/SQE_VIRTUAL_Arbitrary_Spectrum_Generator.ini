# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: SQE_VIRTUAL_Arbitrary_Spectrum_Generator

# The version string should be updated whenever changes are made to this config file
version: 1.0

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: SQE_VIRTUAL_Arbitrary_Spectrum_Generator

# Define that the driver is a Signal Generator
signal_generator: True

# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.

[Start frequency]
datatype: DOUBLE
permission: READ
group: X-axis
def_value: 1e9
unit: Hz

[Stop frequency]
datatype: DOUBLE
permission: READ
group: X-axis
def_value: 20e9
unit: Hz

[Number of points]
datatype: DOUBLE
def_value: 1000
group: X-axis

[Parameters]
datatype: STRING
tooltip: give them in the format "A=X, B=Y..", where A, B... will be the names of the parameters in the trace3 expression, and X, Y,... their numerical values
def_value: Q=3000, f0=3e9
group: Input expression

[Representation]
datatype: COMBO
combo_def_1: Polar
combo_def_2: Cartesian
def_value: Polar
group: Input expression

[Magnitude]
datatype: STRING
tooltip: provide the expression used to evaluate to generate the signal. Denote the frequency as "f" and use the names specified in "Parameters"
def_value: ((f0/Q)**2 / ((f0/Q)**2 + ( f - f0 )**2))
group: Input expression
state_quant: Representation
state_value_1: Polar

[Phase]
datatype: STRING
tooltip: provide the expression used to evaluate to generate the signal. Denote the frequency as "f" and use the names specified in "Parameters"
def_value: -1000*f
group: Input expression
state_quant: Representation
state_value_1: Polar

[Real part]
datatype: STRING
tooltip: provide the expression used to evaluate to generate the signal. Denote the frequency as "f" and use the names specified in "Parameters"
def_value: ((f0/Q)**2 / ((f0/Q)**2 + ( f - f0 )**2))*cos(-1000*f)
group: Input expression
state_quant: Representation
state_value_1: Cartesian

[Imaginary part]
datatype: STRING
tooltip: provide the expression used to evaluate to generate the signal. Denote the frequency as "f" and use the names specified in "Parameters"
def_value: ((f0/Q)**2 / ((f0/Q)**2 + ( f - f0 )**2))*sin(-1000*f)
group: Input expression
state_quant: Representation
state_value_1: Cartesian

[Gain]
datatype: DOUBLE
def_value: 1
show_in_measurement_dlg: True
group: Additional options
tooltip: Signal = Gain * (Input expression + Noise) + Offset

[Offset]
datatype: DOUBLE
def_value: 0
show_in_measurement_dlg: True
group: Additional options
tooltip: Signal = Gain * (Input expression + Noise) + Offset

[Add noise]
datatype: BOOLEAN
def_value: False
group: Additional options

[Magnitude noise]
datatype: DOUBLE
def_value: 0.1
state_quant: Add noise
state_value_1: True
group: Additional options
tooltip: Signal = Gain * (Input expression + Noise) + Offset

[Phase noise]
datatype: DOUBLE
def_value: 0
unit: rad/pi
state_quant: Add noise
state_value_1: True
group: Additional options
tooltip: Signal = Gain * (Input expression + Noise) + Offset

[Spectrum]
datatype: VECTOR_COMPLEX
permission: READ
x_name: Frequency
x_unit: Hz
show_in_measurement_dlg: True
