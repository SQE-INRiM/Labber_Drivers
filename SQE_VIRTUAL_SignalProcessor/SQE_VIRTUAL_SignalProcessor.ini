# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: SQE_VIRTUAL_SignalProcessor

# The version string should be updated whenever changes are made to this config file
version: 1.0

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: SQE_VIRTUAL_SignalProcessor

# Flags for defining signal generator or signal analyzer functionality
signal_analyzer: True

# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = False


# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.

#########
# INPUT #
#########

[Input type]
datatype: COMBO
combo_def_1: Real
combo_def_2: Complex
def_value: Complex
group: Input

[Real input]
label: Input
datatype: VECTOR
x_name: Frequency
x_unit: Hz
state_quant: Input type
state_value_1: Real
group: Input

[Complex input]
label: Input
datatype: VECTOR_COMPLEX
x_name: Frequency
x_unit: Hz
state_quant: Input type
state_value_1: Complex
group: Input

[Consider uncertainty on input]
datatype: COMBO
combo_def_1: No
combo_def_2: From expression
combo_def_3: From csv
def_value: No
group: Input

[Uncertainty expression]
label: Uncertainty on input
datatype: STRING
tooltip: Write the uncertainty as an expression. The code will evaluate it. Use x as a special placeholder for the input vector.  E.g.: 2e-3**(-2), sqrt(x), ...
group: Input
state_quant: Consider uncertainty on input
state_value_1: From expression

[Uncertainty csv]
label: Uncertainty on input
datatype: PATH
tooltip: Provide a csv file where the first column are the x valus and the second column is 
group: Input
state_quant: Consider uncertainty on input
state_value_1: From expression

########
# TASK #
########

[Task]
datatype: COMBO
combo_def_1: Gain and Bandwidth
combo_def_2: Signal to Noise Ratio
# combo_def_3: Mean and Standard deviation
# combo_def_4: Linear fit
group: Output

#########
# G, BW #
#########

[Gain]
datatype: DOUBLE
unit: dB
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth

[Uncertainty on Gain]
datatype: DOUBLE
unit: dB
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth
second_state_quant: Consider uncertainty on input
second_state_value_1: True

[Left -3 dB point]
datatype: DOUBLE
unit: Hz
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth

[Uncertainty on left -3 dB point]
datatype: DOUBLE
unit: Hz
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth
second_state_quant: Consider uncertainty on input
second_state_value_1: True

[Right -3 dB point]
datatype: DOUBLE
unit: Hz
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth

[Uncertainty on right -3 dB point]
datatype: DOUBLE
unit: Hz
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth
second_state_quant: Consider uncertainty on input
second_state_value_1: True

[2-sigma ripple]
datatype: DOUBLE
unit: dB
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth

[Uncertainty on 2-sigma ripple]
datatype: DOUBLE
unit: dB
permission: READ
group: Output
state_quant: Task
state_value_1: Gain and Bandwidth
second_state_quant: Consider uncertainty on input
second_state_value_1: True

#########
# double G, BW #
#########


#######
# SNR #
#######

[SNR]
datatype: DOUBLE
unit: dB
permission: READ
group: Output
state_quant: Task
state_value_1: Signal to Noise Ratio

[Uncertainty on SNR]
datatype: DOUBLE
unit: dB
permission: READ
group: Output
state_quant: Task
state_value_1: Signal to Noise Ratio
second_state_quant: Consider uncertainty on input
second_state_value_1: True

# [Real Mean]
# label: Mean
# datatype: DOUBLE
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Mean and Standard deviation
# second_state_quant: Input type
# second_state_value_1: Real

# [Real standard deviation]
# datatype: DOUBLE
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Mean and Standard deviation
# second_state_quant: Input type
# second_state_value_1: Real

# [Complex Mean]
# label: Mean
# datatype: COMPLEX
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Mean and Standard deviation
# second_state_quant: Input type
# second_state_value_1: Complex

# [Complex standard deviation]
# datatype: DOUBLE
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Mean and Standard deviation
# second_state_quant: Input type
# second_state_value_1: Complex

# [Slope]
# datatype: DOUBLE
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Linear fit

# [Error on slope]
# datatype: DOUBLE
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Linear fit

# [Intercept]
# datatype: DOUBLE
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Linear fit

# [Error on intercept]
# datatype: DOUBLE
# permission: READ
# group: Output
# state_quant: Task
# state_value_1: Linear fit