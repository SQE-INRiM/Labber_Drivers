# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: SQE_RedPitaya_STEMlab125-14

# The version string should be updated whenever changes are made to this config file
version: 1.0

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: SQE_RedPitaya_STEMlab125-14

#Set to True if driver is a Signal Generator. Default is False.
#signal_generator: True

#Set to True if driver is a Signal Analyzer. Default is False.
#signal_analyzer:  True

#Set to True if driver is a Controller. Default is False.
#controller: True

#Define if the instrument can be hardware triggered
support_arm: True

[Model and options]
# The option section allow instruments with different options to use the same driver

# Check instrument model id at startup (True or False). Default is False
check_model: False

# List of models supported by this driver
model_str_1: STEMlab125-14 4-ChannelSystem


# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: False

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 5

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication. 
query_instr_errors: False

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd: :SYST:ERR?

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
init:

# Final commands sent to the instrument when closing the driver
final: 

# Send Go-to-local over GPIB interface after closing instrument
gpib_go_to_local: True


# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.


[LED1]
datatype: BOOLEAN
set_cmd: :DIG:PIN LED1,<*>
get_cmd: :DIG:PIN? LED1

[LED2]
datatype: BOOLEAN
set_cmd: :DIG:PIN LED2,<*>
get_cmd: :DIG:PIN? LED2

[ANALOG1]
datatype: DOUBLE
unit: V
permission: READ
get_cmd: :ANALOG:PIN? AIN1

[RF_In1]
datatype: VECTOR
permission: READ
unit: V
x_name: Time
x_unit: s

[RF_In2]
datatype: VECTOR
permission: READ
unit: V
x_name: Time
x_unit: s

[Phase Align]
datatype: BUTTON
set_cmd: PHAS_ALIGN

#------------------------RF IN
#[Acquisition Trigger]
#datatype: COMBO
#permission: WRITE
#def_value: NOW
#combo_def_1: NOW
#combo_def_2: AWG_PositiveEdge
#combo_def_3: AWG_NegativeEdge
#combo_def_4: CH1_PositiveEdge
#combo_def_5: CH1_NegativeEdge
#combo_def_6: CH2_PositiveEdge
#combo_def_7: CH2_NegativeEdge
#combo_def_8: EXT_PositiveEdge
#combo_def_9: EXT_NegativeEdge
#cmd_def_1: NOW
#cmd_def_2: AWG_PE
#cmd_def_3: AWG_NE
#cmd_def_4: CH1_PE
#cmd_def_5: CH1_NE
#cmd_def_6: CH2_PE
#cmd_def_7: CH2_NE
#cmd_def_8: EXT_PE
#cmd_def_9: EXT_NE
#set_cmd: :ACQ:TRIG
#group: RF In

#[Acquisition Trigger Level]
#datatype: DOUBLE
#def_value: 0
#unit: V
#set_cmd: :ACQ:TRIG:LEV <*>
#get_cmd: :ACQ:TRIG:LEV?
#group: RF In

#[Acquisition Trigger Delay]
#datatype: COMBO
#permission: WRITE
#def_value: Center
#combo_def_1: Left
#combo_def_2: Center
#cmd_def_1: DLY 8192
#cmd_def_2: DLY 0
#set_cmd: :ACQ:TRIG:
#group: RF In

#------------------------RF OUT

[Function OUT1]
datatype: COMBO
permission: WRITE
def_value: Sinusoid
combo_def_1: Sinusoid
combo_def_2: Square
combo_def_3: Triangle
combo_def_4: SawU
combo_def_5: SawD
combo_def_6: PWM
combo_def_7: Arbitrary
combo_def_8: DC
combo_def_9: DC_NEG
cmd_def_1: SINE
cmd_def_2: SQUARE
cmd_def_3: TRIANGLE
cmd_def_4: SAWU
cmd_def_5: SAWD
cmd_def_6: PWM
cmd_def_7: ARBITRARY
cmd_def_8: DC
cmd_def_9: DC_NEG
set_cmd: SOUR1:FUNC
group: RF Out
section: OUT1

[Output State OUT1]
datatype: COMBO
permission: WRITE
def_value: OFF
combo_def_1: ON
combo_def_2: OFF
cmd_def_1: ON
cmd_def_2: OFF
set_cmd: :OUTPUT1:STATE 
group: RF Out
section: OUT1

[Frequency OUT1]
datatype: DOUBLE
def_value: 5E6
unit: Hz
set_cmd: SOUR1:FREQ:FIX <*>
get_cmd: SOUR1:FREQ:FIX?
group: RF Out
section: OUT1

[Amplitude OUT1]
datatype: DOUBLE
def_value: 0.1
unit: V
set_cmd: SOUR1:VOLT <*>
get_cmd: SOUR1:VOLT?
group: RF Out
section: OUT1

[Offset OUT1]
datatype: DOUBLE
def_value: 0
unit: V
set_cmd: SOUR1:VOLT:OFFS <*>
get_cmd: SOUR1:VOLT:OFFS?
group: RF Out
section: OUT1

[Phase OUT1]
datatype: DOUBLE
def_value: 0
unit: Deg
set_cmd: SOUR1:PHAS <*>
get_cmd: SOUR1:PHAS?
group: RF Out
section: OUT1

[Function OUT2]
datatype: COMBO
permission: WRITE
def_value: Sinusoid
combo_def_1: Sinusoid
combo_def_2: Square
combo_def_3: Triangle
combo_def_4: SawU
combo_def_5: SawD
combo_def_6: PWM
combo_def_7: Arbitrary
combo_def_8: DC
combo_def_9: DC_NEG
cmd_def_1: SINE
cmd_def_2: SQUARE
cmd_def_3: TRIANGLE
cmd_def_4: SAWU
cmd_def_5: SAWD
cmd_def_6: PWM
cmd_def_7: ARBITRARY
cmd_def_8: DC
cmd_def_9: DC_NEG
set_cmd: SOUR2:FUNC
group: RF Out
section: OUT2

[Output State OUT2]
datatype: COMBO
permission: WRITE
def_value: OFF
combo_def_1: ON
combo_def_2: OFF
cmd_def_1: ON
cmd_def_2: OFF
set_cmd: :OUTPUT2:STATE 
group: RF Out
section: OUT2

[Frequency OUT2]
datatype: DOUBLE
def_value: 5E6
unit: Hz
set_cmd: SOUR2:FREQ:FIX <*>
get_cmd: SOUR2:FREQ:FIX?
group: RF Out
section: OUT2

[Amplitude OUT2]
datatype: DOUBLE
def_value: 0.1
unit: V
set_cmd: SOUR2:VOLT <*>
get_cmd: SOUR2:VOLT?
group: RF Out
section: OUT2

[Offset OUT2]
datatype: DOUBLE
def_value: 0
unit: V
set_cmd: SOUR2:VOLT:OFFS <*>
get_cmd: SOUR2:VOLT:OFFS?
group: RF Out
section: OUT2

[Phase OUT2]
datatype: DOUBLE
def_value: 0
unit: Deg
set_cmd: SOUR2:PHAS <*>
get_cmd: SOUR2:PHAS?
group: RF Out
section: OUT2







