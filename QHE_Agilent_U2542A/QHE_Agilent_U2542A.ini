# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: QHE_Agilent_U2542A

# The version string should be updated whenever changes are made to this config file
version: 0.1

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: QHE_Agilent_U2542A

#Pre-defined communication interface for instrument, default is GPIB.
#Valid values are GPIB, TCPIP, USB, PXI, Serial, VISA, Other, None.
interface: VISA

#Set to True if driver is a Signal Generator. Default is False.
#signal_generator: True

#Set to True if driver is a Signal Analyzer. Default is False.
#signal_analyzer:  True

#Set to True if driver is a Controller. Default is False.
#controller: True


[Model and options]
# The option section allow instruments with different options to use the same driver

# Check instrument model id at startup (True or False). Default is False
check_model: False

# List of models supported by this driver
model_str_1: U2531A
model_str_2: U2541A
model_str_3: U2542A

model_cmd: :MODel?

# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: True

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 5

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication. 
query_instr_errors: True

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd: :SYST:ERR?

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
# init: TRIG:SOUR IMM
init: 

# Final commands sent to the instrument when closing the driver
# final: *CLS;*RST

always_read_after_write: False

# Make GPIB instrument automatically go to local after closing. Default is False.
gpib_go_to_local: True

# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   cmd_def_1
#   cmd_def_2
#   ...
#   cmd_def_n: List of strings that define what is sent to/read from an instrument 
#for a quantity that is defined as a list of multiple options. 
#         Only used when datatype is COMBO.
#state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.

#quantities

#[-->AI] 
[Error]
datatype: STRING
get_cmd: :SYST:ERR?
permission: READ
section: Instrument settings

[Enable signal route input ch1]
datatype: BOOLEAN
def_value: 1
set_cmd: :ROUTe:ENABle <*>, (@101)
get_cmd: :ROUTe:ENABle? (@101)
group: Instrument settings ch1
section: Analog Input
[Enable signal route input ch2]
datatype: BOOLEAN
def_value: 1
set_cmd: :ROUTe:ENABle <*>, (@102)
get_cmd: :ROUTe:ENABle? (@102)
group: Instrument settings ch2
section: Analog Input
[Enable signal route input ch3]
datatype: BOOLEAN
def_value: 1
set_cmd: :ROUTe:ENABle <*>, (@103)
get_cmd: :ROUTe:ENABle? (@103)
group: Instrument settings ch3
section: Analog Input
[Enable signal route input ch4]
datatype: BOOLEAN
def_value: 1
set_cmd: :ROUTe:ENABle <*>, (@104)
get_cmd: :ROUTe:ENABle? (@104)
group: Instrument settings ch4
section: Analog Input

[AI polarity ch1]
datatype: COMBO
def_value: Bipolar
combo_def_1: Bipolar
combo_def_2: Unipolar
cmd_def_1: BIP
cmd_def_2: UNIP
state_quant: Enable signal route input ch1
state_value_1: 1
set_cmd: :SENSe:VOLTage:POLarity <*>, (@101)
get_cmd: :SENSe:VOLTage:POLarity? (@101)
group: Instrument settings ch1
section: Analog Input
[AI polarity ch2]
datatype: COMBO
def_value: Bipolar
combo_def_1: Bipolar
combo_def_2: Unipolar
cmd_def_1: BIP
cmd_def_2: UNIP
state_quant: Enable signal route input ch2
state_value_1: 1
set_cmd: :SENSe:VOLTage:POLarity <*>, (@102)
get_cmd: :SENSe:VOLTage:POLarity? (@102)
group: Instrument settings ch2
section: Analog Input
[AI polarity ch3]
datatype: COMBO
def_value: Bipolar
combo_def_1: Bipolar
combo_def_2: Unipolar
cmd_def_1: BIP
cmd_def_2: UNIP
state_quant: Enable signal route input ch3
state_value_1: 1
set_cmd: :SENSe:VOLTage:POLarity <*>, (@103)
get_cmd: :SENSe:VOLTage:POLarity? (@103)
group: Instrument settings ch3
section: Analog Input
[AI polarity ch4]
datatype: COMBO
def_value: Bipolar
combo_def_1: Bipolar
combo_def_2: Unipolar
cmd_def_1: BIP
cmd_def_2: UNIP
state_quant: Enable signal route input ch4
state_value_1: 1
set_cmd: :SENSe:VOLTage:POLarity <*>, (@104)
get_cmd: :SENSe:VOLTage:POLarity? (@104)
group: Instrument settings ch4
section: Analog Input

; [AI polarity1 ch1]
; datatype: COMBO
; def_value: Bipolar
; combo_def_1: Bipolar
; combo_def_2: Unipolar
; cmd_def_1: BIPolar
; cmd_def_2: UNIPolar
; set_cmd: :ROUTe:CHANnel:POLarity <*>, (@101)
; get_cmd: :ROUTe:CHANnel:POLarity? (@101)
; group: Polling ch1
; section: Analog Input

[AI voltage range ch1]
unit: V
datatype: COMBO
def_value: 10
combo_def_1: 10
combo_def_2: 5
combo_def_3: 2.5
combo_def_4: 1.25
combo_def_5: auto
cmd_def_1: 10
cmd_def_2: 5
cmd_def_3: 2.5
cmd_def_4: 1.25
cmd_def_5: AUTO
state_quant: Enable signal route input ch1
state_value_1: 1
set_cmd: :SENSe:VOLTage:RANGe <*>, (@101)
get_cmd: :SENSe:VOLTage:RANGe? (@101)
group: Instrument settings ch1
section: Analog Input
[AI voltage range ch2]
unit: V
datatype: COMBO
def_value: 10
combo_def_1: 10
combo_def_2: 5
combo_def_3: 2.5
combo_def_4: 1.25
combo_def_5: auto
cmd_def_1: 10
cmd_def_2: 5
cmd_def_3: 2.5
cmd_def_4: 1.25
cmd_def_5: AUTO
state_quant: Enable signal route input ch2
state_value_1: 1
set_cmd: :SENSe:VOLTage:RANGe <*>, (@102)
get_cmd: :SENSe:VOLTage:RANGe? (@102)
group: Instrument settings ch2
section: Analog Input
[AI voltage range ch3]
unit: V
datatype: COMBO
def_value: 10
combo_def_1: 10
combo_def_2: 5
combo_def_3: 2.5
combo_def_4: 1.25
combo_def_5: auto
cmd_def_1: 10
cmd_def_2: 5
cmd_def_3: 2.5
cmd_def_4: 1.25
cmd_def_5: AUTO
state_quant: Enable signal route input ch3
state_value_1: 1
set_cmd: :SENSe:VOLTage:RANGe <*>, (@103)
get_cmd: :SENSe:VOLTage:RANGe? (@103)
group: Instrument settings ch3
section: Analog Input
[AI voltage range ch4]
unit: V
datatype: COMBO
def_value: 10
combo_def_1: 10
combo_def_2: 5
combo_def_3: 2.5
combo_def_4: 1.25
combo_def_5: auto
cmd_def_1: 10
cmd_def_2: 5
cmd_def_3: 2.5
cmd_def_4: 1.25
cmd_def_5: AUTO
state_quant: Enable signal route input ch4
state_value_1: 1
set_cmd: :SENSe:VOLTage:RANGe <*>, (@104)
get_cmd: :SENSe:VOLTage:RANGe? (@104)
group: Instrument settings ch4
section: Analog Input

; [AI voltage range1 ch1]
; unit: V
; datatype: COMBO
; def_value: 10
; combo_def_1: 10
; combo_def_2: 5
; combo_def_3: 2.5
; cmd_def_1: 10
; cmd_def_2: 5
; cmd_def_3: 2.5
; set_cmd: :ROUTe:CHANnel:RANGe <*>, (@101)
; get_cmd: :ROUTe:CHANnel:RANGe? (@101)
; group: Polling ch1
; section: Analog Input

[Number of measurement points to average]
datatype: DOUBLE
def_value: 10
set_cmd: :SENSe:VOLTage:AVERage
get_cmd: :SENSe:VOLTage:AVERage?
permission: WRITE
group: Polling
section: AI - polling

[Read single voltage ch1]
unit: V
datatype: DOUBLE
permission: READ
show_in_measurement_dlg: True
get_cmd: :MEASure:VOLTage:DC? (@101)
state_quant: AI voltage range ch1
state_value_1: 2.5
state_value_2: 5
state_value_3: 10
state_value_4: auto
state_value_5: 1.25
second_state_quant: AI polarity ch1
second_state_value_1: Bipolar
second_state_value_2: Unipolar
group: Polling ch1
section: AI - polling

[Read single voltage ch2]
unit: V
datatype: DOUBLE
permission: READ
show_in_measurement_dlg: True
get_cmd: :MEASure:VOLTage:DC? (@102)
state_quant: AI voltage range ch2
state_value_1: 2.5
state_value_2: 5
state_value_3: 10
state_value_4: auto
state_value_5: 1.25
second_state_quant: AI polarity ch2
second_state_value_1: Bipolar
second_state_value_2: Unipolar
group: Polling ch2
section: AI - polling

[Read single voltage ch3]
unit: V
datatype: DOUBLE
permission: READ
show_in_measurement_dlg: True
get_cmd: :MEASure:VOLTage:DC? (@103)
state_quant: AI voltage range ch3
state_value_1: 2.5
state_value_2: 5
state_value_3: 10
state_value_4: auto
state_value_5: 1.25
second_state_quant: AI polarity ch3
second_state_value_1: Bipolar
second_state_value_2: Unipolar
group: Polling ch3
section: AI - polling

[Read single voltage ch4]
unit: V
datatype: DOUBLE
permission: READ
show_in_measurement_dlg: True
get_cmd: :MEASure:VOLTage:DC? (@104)
state_quant: AI voltage range ch4
state_value_1: 2.5
state_value_2: 5
state_value_3: 10
state_value_4: auto
state_value_5: 1.25
second_state_quant: AI polarity ch4
second_state_value_1: Bipolar
second_state_value_2: Unipolar
group: Polling ch4
section: AI - polling

[Sampling rate]
unit: Hz
datatype: DOUBLE
def_value: 1000
set_cmd: :ACQuire:SRATe
get_cmd: :ACQuire:SRATe?
low_lim: 3
high_lim: 500000
section: AI - continuous

[Continuous Acquisition]
datatype: BOOLEAN
permission: NONE
section: AI - continuous

[Single-block Acquisition]
datatype: BOOLEAN
permission: NONE
section: AI - continuous

[Sample points per data block]
datatype: DOUBLE
def_value: 500
set_cmd: :WAVeform:POINts
get_cmd: :WAVeform:POINts?
high_lim: 8000000
low_lim: 0
state_quant: Continuous Acquisition
state_value_1: 1
group: Continuous Acquisition
section: AI - continuous

[Sample points]
datatype: DOUBLE
def_value: 500
set_cmd: :ACQuire:POINts
get_cmd: :ACQuire:POINts?
high_lim: 8000000
low_lim: 0
state_quant: Single-block Acquisition
state_value_1: 1
group: Single-block Acquisition
section: AI - continuous

[Single-block voltage acquisition]
datatype: BUTTON
permission: WRITE
set_cmd: :DIGitize
state_quant: Single-block Acquisition
state_value_1: 1
group: Single-block Acquisition
section: AI - continuous

[Acquisition complete]
datatype: COMBO
permission: READ
combo_def_1: complete
combo_def_2: not complete
cmd_def_1: YES
cmd_def_2: NO
get_cmd: :WAV:COMP?
state_quant: Single-block Acquisition
state_value_1: 1
group: Single-block Acquisition
section: AI - continuous

[Voltage acquisition start]
datatype: BUTTON
permission: WRITE
set_cmd: :RUN
state_quant: Continuous Acquisition
state_value_1: 1
group: Continuous Acquisition
section: AI - continuous

[Acquisition status]
datatype: COMBO
permission: READ
combo_def_1: empty
combo_def_2: some data can be read
combo_def_3: reading first block of data
cmd_def_1: EPTY
cmd_def_2: DATA
cmd_def_3: FRAG
set_cmd: :WAV:STAT?
state_quant: Continuous Acquisition
state_value_1: 1
group: Continuous Acquisition
section: AI - continuous

[Voltage acquisition stop]
datatype: BUTTON
permission: WRITE
set_cmd: :STOP
group: Continuous Acquisition
state_quant: Continuous Acquisition
state_value_1: 1
section: AI - continuous

[Read voltages]
datatype: VECTOR
show_in_measurement_dlg: True
permission: READ
group: Read
section: AI - continuous

[Voltages read from ch1]
datatype: VECTOR
permission: READ
group: Read
section: AI - continuous
[Voltages read from ch2]
datatype: VECTOR
permission: READ
group: Read
section: AI - continuous
[Voltages read from ch3]
datatype: VECTOR
permission: READ
group: Read
section: AI - continuous
[Voltages read from ch4]
datatype: VECTOR
permission: READ
group: Read
section: AI - continuous

#[-->AO] 

[Enable signal route output ch1]
datatype: BOOLEAN
def_value: 1
set_cmd: :ROUTe:ENABle <*>, (@201)
get_cmd: :ROUTe:ENABle? (@201)
section: Analog Output

[Enable signal route output ch2]
datatype: BOOLEAN
def_value: 1
set_cmd: :ROUTe:ENABle <*>, (@202)
get_cmd: :ROUTe:ENABle? (@202)
section: Analog Output

[AO function ch1]
datatype: COMBO
combo_def_1: single value
combo_def_2: waveform
def_value: single value
permission: none
state_quant: Enable signal route output ch1
state_value_1: 1
group: Start
section: Analog Output

[AO function ch2]
datatype: COMBO
combo_def_1: single value
combo_def_2: waveform
def_value: single value
permission: none
state_quant: Enable signal route output ch2
state_value_1: 1
group: Start
section: Analog Output

[Output single voltage level ch1]
unit: V
datatype: DOUBLE
show_in_measurement_dlg: True
set_cmd: :SOURce:VOLTage:LEVel <*>, (@201)
get_cmd: :SOURce:VOLTage:LEVel? (@201)
low_lim: -10
high_lim: 10
state_quant: AO function ch1
state_value_1: single value
group: Single Value AO
section: Analog Output

[Output single voltage level ch2]
unit: V
datatype: DOUBLE
show_in_measurement_dlg: True
set_cmd: :SOURce:VOLTage:LEVel <*>, (@202)
get_cmd: :SOURce:VOLTage:LEVel? (@202)
low_lim: -10
high_lim: 10
state_quant: AO function ch2
state_value_1: single value
group: Single Value AO
section: Analog Output

[Output function ch1]
datatype: COMBO
combo_def_1: sinusoid
combo_def_2: square
combo_def_3: sawtooth
combo_def_4: triangle
combo_def_5: noise
def_value: sinusoid
permission: WRITE
state_quant: AO function ch1
state_value_1: waveform
group: Function ch1
section: Analog Output

[Output function ch2]
datatype: COMBO
combo_def_1: sinusoid
combo_def_2: square
combo_def_3: sawtooth
combo_def_4: triangle
combo_def_5: noise
def_value: sinusoid
permission: WRITE
state_quant: AO function ch2
state_value_1: waveform
group: Function ch2
section: Analog Output

[Current output function ch1]
datatype: STRING
permission: READ
get_cmd: :APPLy? (@201)
state_quant: AO function ch1
state_value_1: waveform
group: Function ch1
section: Analog Output
[Current output function ch2]
datatype: STRING
permission: READ
get_cmd: :APPLy? (@202)
state_quant: AO function ch2
state_value_1: waveform
group: Function ch2
section: Analog Output

[Amplitude waveform ch1]
datatype: DOUBLE
unit: V
def_value: 0
permission: WRITE
state_quant: AO function ch1
state_value: waveform
group: Function ch1
section: Analog Output

[Offset waveform ch1]
datatype: DOUBLE
unit: V
def_value: 0
permission: WRITE
state_quant: AO function ch1
state_value: waveform
group: Function ch1
section: Analog Output

[Amplitude waveform ch2]
datatype: DOUBLE
unit: V
def_value: 0
permission: WRITE
state_quant: AO function ch2
state_value: waveform
group: Function ch2
section: Analog Output

[Offset waveform ch2]
datatype: DOUBLE
unit: V
def_value: 0
permission: WRITE
state_quant: AO function ch2
state_value: waveform
group: Function ch2
section: Analog Output

; [Amplitude and offset sinusoid ch1]
; datatype: STRING
; permission: WRITE
; state_quant: Output function ch1
; state_value_1: sinusoid
; tooltip: <amplitude>, <offset>
; set_cmd: :APPLy:SINusoid <*>, (@201)
; group: Function ch1
; section: Analog Output
; [Amplitude and offset sinusoid ch2]
; datatype: STRING
; permission: WRITE
; state_quant: Output function ch2
; state_value_1: sinusoid
; tooltip: <amplitude>, <offset>
; set_cmd: :APPLy:SINusoid <*>, (@202)
; group: Function ch2
; section: Analog Output

[Waveform sampling rate]
datatype: DOUBLE
unit: Hz
low_lim: 0
high_lim: 1000000
def_value: 0
set_cmd: :OUTPut:WAVeform:SRATe
group: Function
section: AO - General

[Enable the analog output]
datatype: BOOLEAN
set_cmd: :OUTPut
tooltip: Starts the analog output
section: AO - General

[Waveform frequency]
datatype: DOUBLE
def_value: 5000
unit: Hz
set_cmd: :OUTPut:WAVeform:FREQuency
get_cmd: :OUTPut:WAVeform:FREQuency?
group: Function
section: AO - General

[Number of waveform iterations]
datatype: DOUBLE
def_value: 0
high_lim: 16777215
low_lim: 0
set_cmd: :OUTPut:WAVeform:ITERate
tooltip: Set to 0 to have infinite iteration
group: Function
section: AO - General

[External reference voltage]
datatype: BOOLEAN
permission: none
group: Reference Voltage
section: AO - General

[External reference voltage value]
datatype: DOUBLE
unit: V
low_lim: 0
high_lim: 10
def_value: 10
set_cmd: :ROUTe:CHANnel:RVOLtage
state_quant: External reference voltage
state_value_1: 1
group: Reference Voltage
section: AO - General

[Output reference voltage source ch1]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
def_value: internal
cmd_def_1: INT
cmd_def_2: EXT
state_quant: Enable signal route output ch1
state_value_1: 1
set_cmd: :ROUTe:CHANnel:RSouRCe <*>, (@201)
get_cmd: :ROUTe:CHANnel:RSouRCe? (@201)
group: Reference Voltage
section: AO - General
[Output reference voltage source ch2]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
cmd_def_1: INT
cmd_def_2: EXT
state_quant: Enable signal route output ch2
state_value_1: 1
set_cmd: :ROUTe:CHANnel:RSouRCe <*>, (@202)
get_cmd: :ROUTe:CHANnel:RSouRCe? (@202)
group: Reference Voltage
section: AO - General

#[-->Digital IO]

[Digital IO]
datatype: BOOLEAN
permission: none
section: Digital IO

[Direction ch1]
datatype: COMBO
combo_def_1: in
combo_def_2: out
cmd_def_1: INP
cmd_def_2: OUTP
def_value: in
set_cmd: :CONFigure:DIGital:DIRection <*>, (@501)
get_cmd: :CONFigure:DIGital:DIRection? (@501)
state_quant: Digital IO
state_value_1: 1
group: Digital IO ch1
section: Digital IO
[Direction ch2]
datatype: COMBO
combo_def_1: in
combo_def_2: out
cmd_def_1: INP
cmd_def_2: OUTP
def_value: in
set_cmd: :CONFigure:DIGital:DIRection <*>, (@502)
get_cmd: :CONFigure:DIGital:DIRection? (@502)
state_quant: Digital IO
state_value_1: 1
group: Digital IO ch2
section: Digital IO
[Direction ch3]
datatype: COMBO
combo_def_1: in
combo_def_2: out
cmd_def_1: INP
cmd_def_2: OUTP
def_value: in
set_cmd: :CONFigure:DIGital:DIRection <*>, (@503)
get_cmd: :CONFigure:DIGital:DIRection? (@503)
state_quant: Digital IO
state_value_1: 1
group: Digital IO ch3
section: Digital IO
[Direction ch4]
datatype: COMBO
combo_def_1: in
combo_def_2: out
cmd_def_1: INP
cmd_def_2: OUTP
def_value: in
set_cmd: :CONFigure:DIGital:DIRection <*>, (@504)
get_cmd: :CONFigure:DIGital:DIRection? (@504)
state_quant: Digital IO
state_value_1: 1
group: Digital IO ch4
section: Digital IO

[Output digital pattern to ch1]
datatype: DOUBLE
high_lim: 255
state_quant: Direction ch1
state_value_1: out
set_cmd: :SOURce:DIGital:DATA <*>, (@501)
get_cmd: :SOURce:DIGital:DATA? (@501)
tooltip: This command is used to output a 4-bit or 8-bit digital pattern to the DIO channel.
group: Digital IO ch1
section: Digital IO
[Output digital pattern to ch2]
datatype: DOUBLE
low_lim: 0
high_lim: 255
state_quant: Direction ch2
state_value_1: out
set_cmd: :SOURce:DIGital:DATA <*>, (@502)
get_cmd: :SOURce:DIGital:DATA? (@502)
tooltip: This command is used to output a 4-bit or 8-bit digital pattern to the DIO channel.
group: Digital IO ch2
section: Digital IO
[Output digital pattern to ch3]
datatype: DOUBLE
low_lim: 0
high_lim: 15
state_quant: Direction ch3
state_value_1: out
set_cmd: :SOURce:DIGital:DATA <*>, (@503)
get_cmd: :SOURce:DIGital:DATA? (@503)
tooltip: This command is used to output a 4-bit or 8-bit digital pattern to the DIO channel.
group: Digital IO ch3
section: Digital IO
[Output digital pattern to ch4]
datatype: DOUBLE
low_lim: 0
high_lim: 15
state_quant: Direction ch4
state_value_1: out
set_cmd: :SOURce:DIGital:DATA <*>, (@504)
get_cmd: :SOURce:DIGital:DATA? (@504)
tooltip: This command is used to output a 4-bit or 8-bit digital pattern to the DIO channel.
group: Digital IO ch4
section: Digital IO

[Output single bit ch1]
datatype: BOOLEAN
state_quant: Direction ch1
state_value_1: out
def_value: 0
permission: NONE
group: Digital IO ch1
section: Digital IO
[Bit value ch1]
datatype: BOOLEAN
state_quant: Output single bit ch1
state_value_1: 1
def_value: 0
permission: WRITE
group: Digital IO ch1
section: Digital IO
[Bit number ch1]
datatype: DOUBLE
low_lim: 0
high_lim: 7
permission: WRITE
state_quant: Output single bit ch1
state_value_1: 1
group: Digital IO ch1
section: Digital IO

[Output single bit ch2]
datatype: BOOLEAN
state_quant: Direction ch2
state_value_1: out
permission: NONE
group: Digital IO ch2
section: Digital IO
[Bit value ch2]
datatype: BOOLEAN
state_quant: Output single bit ch2
def_value: 0
state_value_1: 1
permission: WRITE
group: Digital IO ch2
section: Digital IO
[Bit number ch2]
datatype: DOUBLE
low_lim: 0
high_lim: 7
permission: WRITE
state_quant: Output single bit ch2
state_value_1: 1
group: Digital IO ch2
section: Digital IO

[Output single bit ch3]
datatype: BOOLEAN
state_quant: Direction ch3
state_value_1: out
permission: NONE
group: Digital IO ch3
section: Digital IO
[Bit value ch3]
datatype: BOOLEAN
state_quant: Output single bit ch3
def_value: 0
state_value_1: 1
permission: WRITE
group: Digital IO ch3
section: Digital IO
[Bit number ch3]
datatype: DOUBLE
low_lim: 0
high_lim: 3
permission: WRITE
state_quant: Output single bit ch3
state_value_1: 1
group: Digital IO ch3
section: Digital IO


[Output single bit ch4]
datatype: BOOLEAN
state_quant: Direction ch4
state_value_1: out
permission: NONE
group: Digital IO ch4
section: Digital IO
[Bit value ch4]
datatype: BOOLEAN
state_quant: Output single bit ch4
state_value_1: 1
def_value: 0
permission: WRITE
group: Digital IO ch4
section: Digital IO
[Bit number ch4]
datatype: DOUBLE
low_lim: 0
high_lim: 3
permission: WRITE
state_quant: Output single bit ch4
state_value_1: 1
group: Digital IO ch4
section: Digital IO

[Digital data ch1]
datatype: DOUBLE
state_quant: Direction ch1
state_value_1: in
permission: READ
get_cmd: :MEASure:DIGital? (@501)
group: Digital IO ch1
section: Digital IO
[Digital data ch2]
datatype: DOUBLE
state_quant: Direction ch2
state_value_1: in
permission: READ
get_cmd: :MEASure:DIGital? (@502)
group: Digital IO ch2
section: Digital IO
[Digital data ch3]
datatype: DOUBLE
state_quant: Direction ch3
state_value_1: in
permission: READ
get_cmd: :MEASure:DIGital? (@503)
group: Digital IO ch3
section: Digital IO
[Digital data ch4]
datatype: DOUBLE
state_quant: Direction ch4
state_value_1: in
permission: READ
get_cmd: :MEASure:DIGital? (@504)
group: Digital IO ch4
section: Digital IO

#[-->General Purpose Digital Counter]

[General purpose digital counter]
datatype: BOOLEAN
permission: none
section: General Purpose Digital Counter

[Digital counter function ch1]
datatype: COMBO
combo_def_1: totalizer measurement
combo_def_2: period measurement
combo_def_3: frequency measurement
combo_def_4: pulse width measurement
cmd_def_1: TOT
cmd_def_2: PER
cmd_def_3: FREQ
cmd_def_4: PWID
set_cmd: :SENSe:COUNter:FUNCtion <*>, (@301)
get_cmd: :SENSe:COUNter:FUNCtion? (@301)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Digital counter function ch2]
datatype: COMBO
combo_def_1: totalizer measurement
combo_def_2: period measurement
combo_def_3: frequency measurement
combo_def_4: pulse width measurement
cmd_def_1: TOT
cmd_def_2: PER
cmd_def_3: FREQ
cmd_def_4: PWID
set_cmd: :SENSe:COUNter:FUNCtion <*>, (@302)
get_cmd: :SENSe:COUNter:FUNCtion? (@302)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Gate source ch1]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
cmd_def_1: INT
cmd_def_2: EXT
set_cmd: :SENSe:COUNter:GATE:SOURce <*>, (@301)
get_cmd: :SENSe:COUNter:GATE:SOURce? (@301)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch1 - gate
section: General Purpose Digital Counter
[Gate source ch2]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
cmd_def_1: INT
cmd_def_2: EXT
set_cmd: :SENSe:COUNter:GATE:SOURce <*>, (@302)
get_cmd: :SENSe:COUNter:GATE:SOURce? (@302)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch2 - gate
section: General Purpose Digital Counter

[Gate polarity ch1]
datatype: COMBO
combo_def_1: active high polarity
combo_def_2: active low polarity
cmd_def_1: AHI
cmd_def_2: ALO
set_cmd: :SENSe:COUNter:GATE:POLarity <*>, (@301)
get_cmd: :SENSe:COUNter:GATE:POLarity? (@301)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch1 - gate
section: General Purpose Digital Counter
[Gate polarity ch2]
datatype: COMBO
combo_def_1: active high polarity
combo_def_2: active low polarity
cmd_def_1: AHI
cmd_def_2: ALO
set_cmd: :SENSe:COUNter:GATE:POLarity <*>, (@302)
get_cmd: :SENSe:COUNter:GATE:POLarity? (@302)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch2 - gate
section: General Purpose Digital Counter

[Clock polarity ch1]
datatype: COMBO
combo_def_1: active high polarity
combo_def_2: active low polarity
cmd_def_1: AHI
cmd_def_2: ALO
set_cmd: :SENSe:COUNter:CLocK:POLarity <*>, (@301)
get_cmd: :SENSe:COUNter:CLocK:POLarity? (@301)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch1 - clock
section: General Purpose Digital Counter
[Clock polarity ch2]
datatype: COMBO
combo_def_1: active high polarity
combo_def_2: active low polarity
cmd_def_1: AHI
cmd_def_2: ALO
set_cmd: :SENSe:COUNter:CLocK:POLarity <*>, (@302)
get_cmd: :SENSe:COUNter:CLocK:POLarity? (@302)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch2 - clock
section: General Purpose Digital Counter

[Clock source ch1]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
cmd_def_1: INT
cmd_def_2: EXT
set_cmd: :SENSe:COUNter:CLocK:SOURce <*>, (@301)
get_cmd: :SENSe:COUNter:CLocK:SOURce? (@301)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch1 - clock
section: General Purpose Digital Counter
[Clock source ch2]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
cmd_def_1: INT
cmd_def_2: EXT
set_cmd: :SENSe:COUNter:CLocK:SOURce <*>, (@302)
get_cmd: :SENSe:COUNter:CLocK:SOURce? (@302)
state_quant: General purpose digital counter
state_value_1: 1
group: General Purpose Digital Counter ch2 - clock
section: General Purpose Digital Counter

[Internal clock frequency]
datatype: DOUBLE
unit: kHz
permission: READ
get_cmd: :SENSe:COUNter:CLocK:INTernal?
section: General Purpose Digital Counter

[External clock frequency ch1]
datatype: DOUBLE
unit: kHz
low_lim: 1000
high_lim: 10000
set_cmd: :SENSe:COUNter:CLocK:EXTernal <*>, (@301)
get_cmd: :SENSe:COUNter:CLocK:EXTernal? (@301)
state_quant: Clock source ch1
state_value_1: external
group: General Purpose Digital Counter ch1 - clock
section: General Purpose Digital Counter
[External clock frequency ch2]
datatype: DOUBLE
unit: kHz
low_lim: 1000
high_lim: 10000
set_cmd: :SENSe:COUNter:CLocK:EXTernal <*>, (@302)
get_cmd: :SENSe:COUNter:CLocK:EXTernal? (@302)
state_quant: Clock source ch2
state_value_1: external
group: General Purpose Digital Counter ch2 - clock
section: General Purpose Digital Counter

[Initial count value ch1]
datatype: DOUBLE
def_value: 0
low_lim: 0
high_lim: 2147483647
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:TOTalize:IVALue <*>, (@301)
get_cmd: :SENSe:COUNter:TOTalize:IVALue? (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Initial count value ch2]
datatype: DOUBLE
def_value: 0
low_lim: 0
high_lim: 2147483647
state_quant: Digital counter function ch2
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:TOTalize:IVALue <*>, (@302)
get_cmd: :SENSe:COUNter:TOTalize:IVALue? (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Counter channel frequency measurement ch1]
datatype: DOUBLE
unit: kHz
permission: READ
state_quant: Digital counter function ch1
state_value_1: frequency measurement
get_cmd: :MEASure:COUNter:FREQuency? (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Counter channel frequency measurement ch2]
datatype: DOUBLE
unit: kHz
permission: READ
state_quant: Digital counter function ch2
state_value_1: frequency measurement
get_cmd: :MEASure:COUNter:FREQuency? (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Counter channel period measurement ch1]
datatype: DOUBLE
unit: ms
permission: READ
state_quant: Digital counter function ch1
state_value_1: period measurement
get_cmd: :MEASure:COUNter:PERiod? (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Counter channel period measurement ch2]
datatype: DOUBLE
unit: ms
permission: READ
state_quant: Digital counter function ch2
state_value_1: period measurement
get_cmd: :MEASure:COUNter:PERiod? (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Counter channel pulse width measurement ch1]
datatype: DOUBLE
unit: ms
permission: READ
state_quant: Digital counter function ch1
state_value_1: pulse width measurement
get_cmd: :MEASure:COUNter:PWIDth? (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Counter channel pulse width measurement ch2]
datatype: DOUBLE
unit: ms
permission: READ
state_quant: Digital counter function ch2
state_value_1: pulse width measurement
get_cmd: :MEASure:COUNter:PWIDth? (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Direction of the counting process ch1]
datatype: COMBO
combo_def_1: up
combo_def_2: down
cmd_def_1: UP
cmd_def_2: DOWN
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:TOTalize:UDOWn:DIRection <*>, (@301)
get_cmd: :SENSe:COUNter:TOTalize:UDOWn:DIRection? (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Direction of the counting process ch2]
datatype: COMBO
combo_def_1: up
combo_def_2: down
cmd_def_1: UP
cmd_def_2: DOWN
state_quant: Digital counter function ch2
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:TOTalize:UDOWn:DIRection <*>, (@302)
get_cmd: :SENSe:COUNter:TOTalize:UDOWn:DIRection? (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Counting source ch1]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
cmd_def_1: INT
cmd_def_2: EXT
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:TOTalize:UDOWn:SOURce <*>, (@301)
get_cmd: :SENSe:COUNter:TOTalize:UDOWn:SOURce? (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Counting source ch2]
datatype: COMBO
combo_def_1: internal
combo_def_2: external
cmd_def_1: INT
cmd_def_2: EXT
state_quant: Digital counter function ch2
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:TOTalize:UDOWn:SOURce <*>, (@302)
get_cmd: :SENSe:COUNter:TOTalize:UDOWn:SOURce? (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Start totalizer measurement ch1]
datatype: BUTTON
permission: WRITE
set_cmd: :SENSe:COUNter:TOTalize:INITiate (@301)
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Start totalizer measurement ch2]
datatype: BUTTON
permission: WRITE
set_cmd: :SENSe:COUNter:TOTalize:INITiate (@302)
state_quant: Digital counter function ch2
state_value_1: totalizer measurement
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

; [digital counter function measurement ch1]
; datatype: DOUBLE
; permission: READ
; get_cmd: :MEASure:COUNter:DATA? (@301)
; state_quant: Digital counter function ch2
; state_value_1: period measurement
; state_value_2: frequency measurement
; state_value_3: pulse width measurement
; group: General Purpose Digital Counter ch1
; section: General Purpose Digital Counter
; [digital counter function measurement ch2]
; datatype: DOUBLE
; permission: READ
; get_cmd: :MEASure:COUNter:DATA? (@302)
; state_quant: Digital counter function ch2
; state_value_1: period measurement
; state_value_2: frequency measurement
; state_value_3: pulse width measurement
; group: General Purpose Digital Counter ch2
; section: General Purpose Digital Counter

[Enable digital ch1]
datatype: COMBO
combo_def_1: enable
combo_def_2: disable
cmd_def_1: ENAB
cmd_def_2: DIS
set_cmd: :SENSe:COUNter:GATE:CONTrol <*>, (@301)
get_cmd: :SENSe:COUNter:GATE:CONTrol? (@301)
state_quant: Gate source ch1
state_value_1: internal
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Enable digital ch2]
datatype: COMBO
combo_def_1: enable
combo_def_2: disable
cmd_def_1: ENAB
cmd_def_2: DIS
set_cmd: :SENSe:COUNter:GATE:CONTrol <*>, (@302)
get_cmd: :SENSe:COUNter:GATE:CONTrol? (@302)
state_quant: Gate source ch2
state_value_1: internal
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Totalized value ch1]
datatype: DOUBLE
permission: READ
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
get_cmd: :MEASure:COUNter:TOTalize? (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Totalized value ch2]
datatype: DOUBLE
permission: READ
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
get_cmd: :MEASure:COUNter:TOTalize? (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

[Abort counter and clear ch1]
datatype: BUTTON
permission: WRITE
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:ABORt (@301); SENSe:COUNter:TOTalize:CLEar (@301)
group: General Purpose Digital Counter ch1
section: General Purpose Digital Counter
[Abort counter and clear ch2]
datatype: BUTTON
permission: WRITE
state_quant: Digital counter function ch1
state_value_1: totalizer measurement
set_cmd: :SENSe:COUNter:ABORt (@302); SENSe:COUNter:TOTalize:CLEar (@302)
group: General Purpose Digital Counter ch2
section: General Purpose Digital Counter

# -> SOUR:COUN:OUTP:POL AHI,(@301) ??????

#[-->Trigger settings]

[Trigger settings]
datatype: BOOLEAN
permission: none
section: Trigger settings

[Input trigger type]
datatype: COMBO
combo_def_1: post-trigger
combo_def_2: pre-trigger
combo_def_3: mid-trigger
combo_def_4: delay-trigger
cmd_def_1: POST
cmd_def_2: PRE
cmd_def_3: MID
cmd_def_4: DEL
set_cmd: :TRIGger:TYPe
state_quant: Trigger settings
state_value_1: 1
def_value: post-trigger
group: Input Trigger settings
section: Trigger settings

[Output trigger type]
datatype: COMBO
combo_def_1: post-trigger
combo_def_2: pre-trigger
combo_def_3: mid-trigger
combo_def_4: delay-trigger
cmd_def_1: POST
cmd_def_2: PRE
cmd_def_3: MID
cmd_def_4: DEL
set_cmd: :OUTPut:TRIGger:TYPe
state_quant: Trigger settings
state_value_1: 1
def_value: post-trigger
group: Output Trigger settings
section: Trigger settings

[Analog Input trigger condition]
datatype: COMBO
combo_def_1: above-high-level
combo_def_2: below-low-level
combo_def_3: window (inside region)
cmd_def_1: AHIG
cmd_def_2: BLOW
cmd_def_3: WIND
set_cmd: :TRIGger:ATRiGger:CONDition
state_quant: Trigger settings
state_value_1: 1
def_value: below-low-level
group: Input Trigger settings
section: Trigger settings

[Analog Output trigger condition]
datatype: COMBO
combo_def_1: above-high-level
combo_def_2: below-low-level
combo_def_3: window (inside region)
cmd_def_1: AHIG
cmd_def_2: BLOW
cmd_def_3: WIND
set_cmd: :OUTPut:TRIGger:ATRiGger:CONDition
state_quant: Trigger settings
state_value_1: 1
def_value: below-low-level
group: Output Trigger settings
section: Trigger settings

[Analog Input trigger high threshold voltage]
datatype: DOUBLE
unit: V
low_lim: -10
high_lim: 10
def_value: 0
set_cmd: :TRIGger:ATRiGger:HTHReshold
state_quant: Trigger settings
state_value_1: 1
group: Input Trigger settings
section: Trigger settings

[Analog Output trigger high threshold voltage]
datatype: DOUBLE
unit: V
low_lim: -10
high_lim: 10
def_value: 0
set_cmd: :OUTPut:TRIGger:ATRiGger:HTHReshold
state_quant: Trigger settings
state_value_1: 1
group: Output Trigger settings
section: Trigger settings

[Analog Input trigger low threshold voltage]
datatype: DOUBLE
unit: V
low_lim: -10
high_lim: 10
def_value: 0
set_cmd: :TRIGger:ATRiGger:LTHReshold
state_quant: Trigger settings
state_value_1: 1
group: Input Trigger settings
section: Trigger settings

[Analog Output trigger low threshold voltage]
datatype: DOUBLE
unit: V
low_lim: -10
high_lim: 10
def_value: 0
set_cmd: :OUTPut:TRIGger:ATRiGger:LTHReshold
state_quant: Trigger settings
state_value_1: 1
group: Output Trigger settings
section: Trigger settings

[Digital input trigger polarity]
datatype: COMBO
combo_def_1: positive-edge triggering
combo_def_2: negative-edge triggering
cmd_def_1: POS
cmd_def_2: NEG
set_cmd: :TRIGger:DTRiGger:POLarity
state_quant: Trigger settings
state_value_1: 1
def_value: positive-edge triggering
group: Input Trigger settings
section: Trigger settings

[Digital output trigger polarity]
datatype: COMBO
combo_def_1: positive-edge triggering
combo_def_2: negative-edge triggering
cmd_def_1: POS
cmd_def_2: NEG
set_cmd: :OUTPut:TRIGger:DTRiGger:POLarity
state_quant: Trigger settings
state_value_1: 1
def_value: positive-edge triggering
group: Output Trigger settings
section: Trigger settings

[Input trigger source]
datatype: COMBO
combo_def_1: immediate triggering
combo_def_2: external digital trigger pin
combo_def_3: external analog trigger pin
combo_def_4: star triggering
cmd_def_1: NONE
cmd_def_2: EXTD
cmd_def_3: EXTA
cmd_def_4: STRG
set_cmd: :TRIGger:SOURce
state_quant: Trigger settings
state_value_1: 1
def_value: immediate triggering
group: Input Trigger settings
section: Trigger settings

[Output trigger source]
datatype: COMBO
combo_def_1: immediate triggering
combo_def_2: external digital trigger pin
combo_def_3: external analog trigger pin
combo_def_4: star triggering
cmd_def_1: NONE
cmd_def_2: EXTD
cmd_def_3: EXTA
cmd_def_4: STRG
set_cmd: :OUTPut:TRIGger:SOURce
state_quant: Trigger settings
state_value_1: 1
def_value: immediate triggering
group: Output Trigger settings
section: Trigger settings

[Input delay counter value]
datatype: DOUBLE
set_cmd: :TRIGger:DCouNT
state_quant: Input trigger type
state_value_1: delay-trigger
group: Input Trigger settings
section: Trigger settings

[Output delay counter value]
datatype: DOUBLE
set_cmd: :OUTPut:TRIGger:DCouNT
state_quant: Output trigger type
state_value_1: delay-trigger
group: Output Trigger settings
section: Trigger settings

#[-->others]

[Timebase/clock source]
datatype: COMBO
combo_def_1: DAQ internal clock
combo_def_2: EXT_TIMEBASE pin
cmd_def_1: INT
cmd_def_2: EXT
set_cmd: :CONFigure:TIMEbase:SOURce
def_value: DAQ internal clock
section: Others

[External clock frequency]
datatype: DOUBLE
unit: kHz
low_lim: 10000
high_lim: 48000
def_value: 10000
set_cmd: :CONFigure:TIMEbase:ECLocK
state_quant: Timebase/clock source
state_value_1: EXT_TIMEBASE pin
section: Others

[Simultaneous synchronization status]
datatype: COMBO
combo_def_1: SSI state disabled
combo_def_2: master
combo_def_3: slave
cmd_def_1: NONE
cmd_def_2: MAST
cmd_def_3: SLAV
set_cmd: :CONFigure:SSI
def_value: SSI state disabled
section: Others

[Reset and calibration]
datatype: BOOLEAN
permission: WRITE
section: Others

[Status]
datatype: BOOLEAN
permission: WRITE
section: Others

[Auto calibration]
datatype: BUTTON
permission: WRITE
set_cmd: :CALibration:BEGin
state_quant: Reset and calibration
state_value_1: 1
section: Others

[Operation complete]
datatype: BOOLEAN
permission: READ
get_cmd: *OPC?
state_quant: Status
state_value_1: 1
section: Others

[Clear status]
datatype: BUTTON
permission: WRITE
set_cmd: *CLS
state_quant: Status
state_value_1: 1
section: Others

[Select instrument state]
datatype: COMBO
combo_def_1: 1
combo_def_2: 2
permission: NONE
state_quant: Status
state_value_1: 1
section: Others

[Save in state 1]
datatype: BUTTON
permission: WRITE
state_quant: Select instrument state
state_value_1: 1
set_cmd: *SAV 1
section: Others

[Save in state 2]
datatype: BUTTON
permission: WRITE
state_quant: Select instrument state
state_value_1: 2
set_cmd: *SAV 2
section: Others

[Recall instrument state]
datatype: COMBO
combo_def_1: 1
combo_def_2: 2
permission: NONE
state_quant: Status
state_value_1: 1
section: Others

[Recall state 1]
datatype: BUTTON
permission: WRITE
state_quant: Recall instrument state
state_value_1: 1
set_cmd: *RCL 1
section: Others

[Recall state 2]
datatype: BUTTON
permission: WRITE
state_quant: Recall instrument state
state_value_1: 2
set_cmd: *RCL 2
section: Others

[Reset]
datatype: BUTTON
permission: WRITE
set_cmd: *RST
state_quant: Reset and calibration
state_value_1: 1
section: Others
